%%%%%%%%%%%%%%%%%%%%%%  ANN LAYER MODULES %%%%%%%%%%%%%%%%%%%%%%%%%

% layer module for ANN, neurons
module layer1:
function activate2(integer, integer, integer, integer, integer): integer;
procedure debug()(integer);

% interface declarations
input layer: integer, activation: integer;
input input1: integer, input2: integer;
output output1: integer, output2: integer;

[
	% layer run thread
	emit output1(activate2(?input1, ?input2, ?layer, 0, ?activation));
	||
	emit output2(activate2(?input1, ?input2, ?layer, 1, ?activation));
]

end module

% layer module for ANN, neurons
module layer2:
function activate2(integer, integer, integer, integer, integer): integer;
procedure debug()(integer);

% interface declarations
input layer: integer, activation: integer;
input input1: integer, input2: integer;
output output1: integer;

[
	% layer run thread
	emit output1(activate2(?input1, ?input2, ?layer, 0, ?activation));
]

end module

%%%%%%%%%%%%%%%%%%%%%%  ANN NETWORK MODULE %%%%%%%%%%%%%%%%%%%%%%%%%
module network:
procedure debug()(integer);

% interface declaration
input input1: integer, input2: integer;
output output1: integer;

% signal declaration
signal layer1: integer, layer2: integer, activation: integer, output21: integer, output22: integer in

[	
	emit layer1(1);
	emit layer2(2);
	emit activation(1);
	run layer1[signal layer1/layer, activation/activation, input1/input1, input2/input2, output21/output1, output22/output2];

	await tick;

	run layer2[signal layer2/layer, activation/activation, output21/input1, output22/input2, output1/output1];
]

end signal
end module


%%%%%%%%%%%%%%%%%%%%%%  ANN ADDER MODULE %%%%%%%%%%%%%%%%%%%%%%%%%
module adder:

function add(integer, integer): integer;

input add, num1: integer, num2: integer;
output sum: integer;

loop
	await add;
	run network[signal num1/input1, num2/input2, sum/output1];
end loop

end module
